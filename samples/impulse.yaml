light:
  - num_leds: 256
    gamma_correct: 0
    default_transition_length: 0s
    effects:
      - addressable_lambda:
          name: "Generic linear multi-points impulse"
          lambda: |-
            // I encourage you to copy-paste the following and adapt to your needs!

            // A fast linear implementation of a generic multi-point impulse
            // envelope to use in an animation as a lambda. A point of (0, 0) is
            // assumed at the beginning.
            // Credit: Marc-Antoine Ruel
            struct point { uint16_t duration, value; };
            auto render = [](uint16_t index, const auto& points) {
              // Linear interpolation between two points.
              constexpr auto twopointsinterpolation = [](int32_t offset, int32_t total, int32_t v1, int32_t v2) {
                constexpr auto divRoundClosest = [](int32_t n, int32_t d) {
                  return ((n < 0) == (d < 0)) ? ((n + d/2)/d) : ((n - d/2)/d);
                };
                return uint16_t(v1 + divRoundClosest((v2-v1)*offset, total));
              };
              for (int i = 0; i < sizeof(points)/sizeof(points[0]); i++) {
                const auto duration = points[i].duration;
                if (index < duration) {
                  return twopointsinterpolation(index, duration, i ? points[i-1].value : 0, points[i].value);
                }
                index -= duration;
              }
              return uint16_t(0);
            };

            const auto leds = it.size();
            // A linear implementation of an AHDR (attack, hold, decay, release) impulse
            // envelope to use in an animation as a lambda.
            // Read more on this subject at https://en.wikipedia.org/wiki/Envelope_(music).
            const point impulse[] = {{0, 10}, {10, 255}, {10, 255}, {80, 30}, {156, 1}};
            for (int i = 0; i < leds; i++) {
              auto v = render(i, impulse);
              it[i].set(Color(v, v, v));
            }
