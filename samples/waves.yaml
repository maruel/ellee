light:
  - gamma_correct: 0
    default_transition_length: 0s
    effects:
      - addressable_lambda:
          lambda: |-
            // See impulse.yaml for more details.
            auto impulse = [](auto index, int max = 100, int attack = 10, int sustain = 10, int release = 80, int releaselevel = 30, int remainder = 156) {
              if (index < attack) {
                return (index+1) * max / (attack+1);
              }
              index -= attack;
              if (index < sustain) {
                return max;
              }
              index -= sustain;
              if (index < release) {
                return ((max-releaselevel) * (release-index) / release) + releaselevel;
              }
              index -= release;
              return releaselevel * (remainder-index) / remainder;
            };

            // Constants.
            const auto now = millis();
            const auto leds = it.size();
            const auto wavefreq = 0.0002f;
            const auto wavelength = 0.3f * M_PIf/leds;
            const auto waveoffset = wavefreq * now;
            const auto baselength = M_PIf/leds;

            for (int i = 0; i < leds; i++) {
              // Base glow.
              int32_t baseglow = 200.f*sinf(baselength*i)+55.5f;
              int32_t r = baseglow;
              int32_t g = baseglow;
              int32_t b = baseglow;

              // Additive blue wave.
              //int32_t wavei = 120.f*sinf(wavelength*i + waveoffset)+0.5f;
              //if (wavei < 0) {
              //  wavei = 0;
              //}
              int32_t wavei = impulse((now/50 + i)%256);
              b += wavei;
              if (b > 255) {
                b = 255;
              }
              it[i].set(Color(r, g, b));
            }

