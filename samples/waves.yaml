light:
  - gamma_correct: 0
    default_transition_length: 0s
    effects:
      - addressable_lambda:
          lambda: |-
            // I encourage you to copy-paste the following and adapt to your needs!

            // A fast linear implementation of a generic multi-point impulse
            // envelope to use in an animation as a lambda. A point of (0, 0) is
            // assumed at the beginning.
            // Credit: Marc-Antoine Ruel
            struct point { uint16_t duration, value; };
            auto render = [](uint16_t index, const auto& points) {
              // Linear interpolation between two points.
              constexpr auto twopointsinterpolation = [](int32_t offset, int32_t total, int32_t v1, int32_t v2) {
                constexpr auto divRoundClosest = [](int32_t n, int32_t d) {
                  return ((n < 0) == (d < 0)) ? ((n + d/2)/d) : ((n - d/2)/d);
                };
                return uint16_t(v1 + divRoundClosest((v2-v1)*offset, total));
              };
              for (int i = 0; i < sizeof(points)/sizeof(points[0]); i++) {
                const auto duration = points[i].duration;
                if (index < duration) {
                  return twopointsinterpolation(index, duration, i ? points[i-1].value : 0, points[i].value);
                }
                index -= duration;
              }
              return uint16_t(0);
            };

            // Constants.
            const auto now = millis();
            const auto leds = it.size();
            const auto wavefreq = 0.0002f;
            const auto wavelength = 0.3f * M_PIf/leds;
            const auto waveoffset = wavefreq * now;
            const auto baselength = M_PIf/leds;
            const point impulse[] = {{0, 10}, {10, 100}, {10, 100}, {80, 30}, {156, 1}};

            for (int i = 0; i < leds; i++) {
              // Base glow.
              auto baseglow = (sin16_c(i*32767/leds)>>7) + 55;
              if (baseglow > 255) {
                baseglow = 255;
              }
              auto r = baseglow;
              auto g = baseglow;
              auto b = baseglow;

              // Overpowering blue wave.
              auto wavei = render((now/50 + i)%256, impulse);
              b += wavei;
              if (b > 255) {
                // The more b overflows, the more r and g are reduced at 50%.
                r = g = (255+128)-(b/2);
                if (r > 255) {
                  r = b = 0;
                }
                b = 255;
              }
              it[i].set(Color(r, g, b));
            }

