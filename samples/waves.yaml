light:
  - gamma_correct: 0
    default_transition_length: 0s
    effects:
      - addressable_lambda:
          lambda: |-
            // See impulse.yaml for more details.
            auto impulse = [](uint16_t index, uint16_t max = 100, uint16_t attack = 10, uint16_t sustain = 10, uint16_t release = 80, uint16_t releaselevel = 30, uint16_t remainder = 156) {
              if (index < attack) {
                return uint16_t((index+1) * max / (attack+1));
              }
              index -= attack;
              if (index < sustain) {
                return max;
              }
              index -= sustain;
              if (index < release) {
                return (uint16_t)(((max-releaselevel) * (release-index) / release) + releaselevel);
              }
              index -= release;
              return (uint16_t)(releaselevel * (remainder-index) / remainder);
            };

            // Constants.
            const auto now = millis();
            const auto leds = it.size();
            const auto wavefreq = 0.0002f;
            const auto wavelength = 0.3f * M_PIf/leds;
            const auto waveoffset = wavefreq * now;
            const auto baselength = M_PIf/leds;

            for (int i = 0; i < leds; i++) {
              // Base glow.
              auto baseglow = (sin16_c(i*32767/leds)>>7) + 55;
              if (baseglow > 255) {
                baseglow = 255;
              }
              auto r = baseglow;
              auto g = baseglow;
              auto b = baseglow;

              // Overpowering blue wave.
              auto wavei = impulse((now/50 + i)%256);
              b += wavei;
              if (b > 255) {
                // The more b overflows, the more r and g are reduced at 50%.
                r = g = (255+128)-(b/2);
                if (r > 255) {
                  r = b = 0;
                }
                b = 255;
              }
              it[i].set(Color(r, g, b));
            }

